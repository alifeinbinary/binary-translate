{"version":3,"file":"DebugConsole-CQ1NiVEW.js","sources":["../../src/components/DebugConsole.tsx"],"sourcesContent":["/*\n *   Copyright (c) 2024 Andrew Halliwell\n\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { useEffect } from 'react';\n// import { Console, Hook, Unhook } from 'console-feed';\n// import { faTerminal } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { Message } from \"console-feed/lib/definitions/Component\";\nimport { useAppState, useImageState } from \"../utils/stores\";\n// import '../App.css';\n\n/**\n * A debug console that displays the current state of the application.\n *\n * The console is enabled by default in development mode, but can be\n * disabled by setting the {@link useAppState#debugMode} state to false.\n *\n * The console displays the following information:\n *\n * - The current input string\n * - The length of the output string\n * - The dimensions of the canvas\n * - The size of the image\n * - Whether encryption is enabled\n * - The string to decrypt\n * - The password\n * - The encrypted text\n * - The decrypted text\n *\n * The console also displays a message with a link to the contact page\n * when not in debug mode.\n *\n * The console is updated whenever the application state changes.\n *\n * @returns A React component that displays the debug console.\n */\nconst DebugConsole = () => {\n\n    // const { debugMode, setDebugMode, logs, setLogs } = useAppState();\n    const { debugMode } = useAppState();\n\n    const DEBUG = debugMode ? debugMode : import.meta.env.MODE === \"development\";\n\n    // const handleDebugMode = () => {\n    //     setDebugMode(!debugMode);\n    // };\n\n    const {\n        input,\n        output,\n        canvasHeight,\n        canvasWidth,\n        size,\n        password,\n        encryptionEnabled,\n        stringToDecrypt,\n        encryptedText,\n        decryptedText,\n    } = useImageState();\n\n\n    // Loading the console\n    // useEffect(() => {\n    //     function handleCallback(logItems: Message[]) {\n    //         setLogs(logItems);\n    //     }\n    //     function transpose(matrix: Message[][]) {\n    //         if (!matrix || matrix.length === 0) return [];\n    //         const table = matrix[0];\n    //         return table;\n    //     }\n    //     const hookedConsole = Hook(\n    //         window.console,\n    //         (logItems) =>\n    //             handleCallback([\n    //                 { ...logItems, data: [transpose(logItems.data as Message[][])] },\n    //             ] as Message[]),\n    //         false,\n    //     );\n\n    //     return () => {\n    //         if (hookedConsole) {\n    //             Unhook(hookedConsole);\n    //         }\n    //     };\n    // }, [setLogs]);\n\n    // Keeping it fresh in the console\n    useEffect(() => {\n        // if (!DEBUG) {\n        //     console.clear();\n        // }\n\n        // Debug console\n        const items = {\n            input: [input],\n            outputLength: [output.length], // output,\n            canvasHeight: [`${canvasHeight}px`], // canvasHeight,\n            canvasWidth: [`${canvasWidth}px`],\n            size: [size],\n            encryptionEnabled: [encryptionEnabled],\n            stringToDecrypt: [stringToDecrypt],\n            password: [password],\n            encryptedText: [encryptedText],\n            decryptedText: [decryptedText],\n        };\n        if (!DEBUG) {\n            console.table(items);\n            const msg = `%c Hi ðŸ‘‹! Hit me up at %s if you want to work together!`;\n            const styles = [\n                \"font-size: 16px\",\n                \"font-family: monospace\",\n                \"background: rgb(68,34,51)\",\n                \"background: linear-gradient(90deg, rgba(68,34,51,1) 0%, rgba(153,170,187,1) 100%)\",\n                \"color: white\",\n                \"border-radius: 0.5rem\",\n                \"padding: 8px 19px\",\n                \"border: 1px dashed black\",\n            ].join(\";\");\n            const urlString = \"alifeinbinary.com/contact\";\n            console.log(msg, styles, urlString);\n        }\n    }, [\n        DEBUG,\n        input,\n        size,\n        encryptionEnabled,\n        stringToDecrypt,\n        password,\n        encryptedText,\n        decryptedText,\n        output,\n        canvasHeight,\n        canvasWidth,\n    ]);\n    return (\n        <div className='flex justify-center items-center pt-2'>\n            {/* <button\n                className=\"text-sm font-light text-gray-100 hover:text-gray-300 hover:underline\"\n                onClick={handleDebugMode}\n            >\n                <FontAwesomeIcon\n                    icon={faTerminal}\n                    className=\"text-sm pr-2 font-light text-gray-100 hover:text-gray-300 hover:underline\"\n                />\n            </button>\n            <div data-testid='console-feed' className='w-full max-w-xl h-full text-left'>\n                <Console logs={logs} filter={['table']} variant=\"light\" styles={{ BASE_FONT_SIZE: '12px', PADDING: '0px', LOG_BORDER: 'none' }} />\n            </div> */}\n        </div>\n    )\n}\n\nexport default DebugConsole"],"names":["DebugConsole","debugMode","useAppState","DEBUG","input","output","canvasHeight","canvasWidth","size","password","encryptionEnabled","stringToDecrypt","encryptedText","decryptedText","useImageState","useEffect","items","msg","styles","jsx"],"mappings":"6DAkDA,MAAMA,EAAe,IAAM,CAGjB,KAAA,CAAE,UAAAC,GAAcC,IAEhBC,EAAQF,GAAwB,GAMhC,CACF,MAAAG,EACA,OAAAC,EACA,aAAAC,EACA,YAAAC,EACA,KAAAC,EACA,SAAAC,EACA,kBAAAC,EACA,gBAAAC,EACA,cAAAC,EACA,cAAAC,GACAC,EAAc,EA8BlBC,OAAAA,EAAAA,UAAU,IAAM,CAMZ,MAAMC,EAAQ,CACV,MAAO,CAACZ,CAAK,EACb,aAAc,CAACC,EAAO,MAAM,EAC5B,aAAc,CAAC,GAAGC,CAAY,IAAI,EAClC,YAAa,CAAC,GAAGC,CAAW,IAAI,EAChC,KAAM,CAACC,CAAI,EACX,kBAAmB,CAACE,CAAiB,EACrC,gBAAiB,CAACC,CAAe,EACjC,SAAU,CAACF,CAAQ,EACnB,cAAe,CAACG,CAAa,EAC7B,cAAe,CAACC,CAAa,CAAA,EAEjC,GAAI,CAACV,EAAO,CACR,QAAQ,MAAMa,CAAK,EACnB,MAAMC,EAAM,0DACNC,EAAS,CACX,kBACA,yBACA,4BACA,oFACA,eACA,wBACA,oBACA,0BAAA,EACF,KAAK,GAAG,EAEF,QAAA,IAAID,EAAKC,EADC,2BACgB,CACtC,CAAA,EACD,CACCf,EACAC,EACAI,EACAE,EACAC,EACAF,EACAG,EACAC,EACAR,EACAC,EACAC,CAAA,CACH,EAEIY,EAAA,IAAA,MAAI,CAAA,UAAU,uCAaf,CAAA,CAER"}