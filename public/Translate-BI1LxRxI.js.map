{"version":3,"mappings":"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","names":["Decrypt","lazy","__vitePreload","Encrypt","Translate","theme","useTheme","setCanvasRef","input","setInput","output","setOutput","canvasHeight","setCanvasHeight","canvasWidth","setCanvasWidth","size","password","setPassword","encryptionEnabled","setEncryptionEnabled","stringToDecrypt","setStringToDecrypt","encryptedText","setEncryptedText","setDecryptedText","useImageState","canvasRef","useRef","handleResize","useCallback","canv","plot","useEffect","handleEncrypt","handleDecrypt","convertBinary","jsxs","jsx","Suspense","Spinner","FontAwesomeIcon","faCrow","ToastContainer","Slide"],"ignoreList":[],"sources":["../../src/components/Translate.tsx"],"sourcesContent":["/*\n *   Copyright (c) 2024 Andrew Halliwell\n\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { useEffect, useCallback, useRef, lazy, Suspense } from 'react'\nimport { convertBinary, plot } from '../utils/translate';\nimport { handleEncrypt, handleDecrypt } from '../utils/encryption';\nimport { Slide, ToastContainer } from \"react-toastify\"\n// import { Decrypt } from './Decrypt';\n// import { TextArea } from './Encrypt';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useImageState } from '../utils/stores';\nimport { Spinner } from 'flowbite-react/components/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCrow } from '@fortawesome/free-solid-svg-icons';\nimport { useTheme } from '../hooks/useTheme';\n\nconst Decrypt = lazy(() => import('./Decrypt'));\nconst Encrypt = lazy(() => import('./Encrypt'));\n\n/**\n * This component is the top-level component for the image translation tool.\n * It contains a text area for inputting text, a decrypt component for decrypting PNG files,\n * and a canvas for rendering the translated image.\n *\n * This component uses the useImageState hook to store and retrieve the canvas reference,\n * the current input text, the output text, the canvas height and width, the size of the canvas,\n * the password for encryption, the encryption state, the string to decrypt, the encrypted text,\n * and the decrypted text.\n *\n * The component also uses the useEffect hook to handle the following side effects:\n * - Send the canvas to the store\n * - Paint the canvas\n * - Change the canvas height if necessary\n * - Encrypt the input text when the encryption state is enabled\n * - Decrypt the input text when the encryption state is disabled\n * - Convert the input text to binary when the encryption state is disabled\n * - Convert the encrypted text to binary when the encryption state is enabled\n * - Convert the decrypted text to binary when the encryption state is disabled\n *\n * The component also uses the useCallback hook to create a memoized version of the handleResize\n * function, which is used to resize the canvas when more data is added.\n */\nconst Translate: React.FC = () => {\n    const { theme } = useTheme();\n    const {\n        setCanvasRef,\n        input, setInput,\n        output, setOutput,\n        canvasHeight, setCanvasHeight,\n        canvasWidth, setCanvasWidth,\n        size,\n        password, setPassword,\n        encryptionEnabled, setEncryptionEnabled,\n        stringToDecrypt, setStringToDecrypt,\n        encryptedText, setEncryptedText,\n        setDecryptedText\n    } = useImageState();\n\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n    // Handlers\n    // Resize the canvas when more data is added\n    const handleResize = useCallback(() => {\n        const canv = canvasRef.current;\n        if (!canv) return;\n\n        const contx = canv.getContext('2d');\n\n        if (contx) {\n            if (canvasHeight === canvasHeight) {\n                plot(output, canvasRef, size, encryptionEnabled);\n            }\n            if ((output.length > 64 && encryptionEnabled) ||\n                (output.length > 128 && !encryptionEnabled)) {\n                setCanvasHeight(Math.ceil(output.length / 8) * (40 + size));\n            } else {\n                setCanvasHeight(Math.ceil(output.length / 4) * (80 + size));\n            }\n            if (\n                (output.length > 64 && encryptionEnabled) ||\n                (output.length > 128 && !encryptionEnabled)\n            ) {\n                setCanvasWidth(3000 + (size * 9));\n            } else {\n                setCanvasWidth(3000 + (size * 5));\n            }\n\n            if (canv.width !== canvasWidth || canv.height !== canvasHeight) {\n                canv.width = canvasWidth;\n                canv.height = canvasHeight;\n            }\n        }\n    }, [canvasHeight, canvasWidth, encryptionEnabled, output, setCanvasHeight, setCanvasWidth, size]);\n\n    // Side effects\n\n    // Send the canvas to the store\n    useEffect(() => {\n        if (canvasRef.current) {\n            setCanvasRef(canvasRef);\n        }\n    }, [canvasRef, setCanvasRef]);\n\n    // Paint the canvas\n    useEffect(() => {\n        const canv = canvasRef.current;\n        if (!canv) return;\n\n        plot(output, canvasRef, size, encryptionEnabled);\n    }, [canvasHeight, canvasRef, canvasWidth, encryptionEnabled, output, size])\n\n    // Change the canvas height if necessary\n    useEffect(() => {\n        handleResize();\n    }, [handleResize, output])\n\n\n    useEffect(() => {\n        if (input && encryptionEnabled && password) {\n            handleEncrypt(input, password, setEncryptedText);\n        }\n        if (input.length > 0) {\n            setStringToDecrypt('')\n            setDecryptedText('')\n        }\n    }, [encryptionEnabled, input, password, setDecryptedText, setEncryptedText, setStringToDecrypt])\n\n    useEffect(() => {\n        if (encryptionEnabled && password) {\n            handleDecrypt(stringToDecrypt, password, setDecryptedText);\n        }\n        if (stringToDecrypt && !encryptionEnabled) {\n            setDecryptedText(stringToDecrypt)\n        }\n        if (stringToDecrypt.length > 0) {\n            convertBinary(stringToDecrypt, setOutput);\n        }\n    }, [encryptionEnabled, password, setDecryptedText, setOutput, stringToDecrypt])\n\n    useEffect(() => {\n        if (input.length !== 0 || encryptedText.length !== 0) {\n            if (encryptionEnabled) {\n                convertBinary(encryptedText, setOutput);\n            } else {\n                convertBinary(input, setOutput);\n            }\n        }\n    }, [input, encryptionEnabled, encryptedText, setOutput]);\n\n    return (\n        <section id=\"translate\" className=\"px-6 sm:px-2 xs:px-1\">\n            <div className=\"pt-8 pb-1 md:px-4 sm:px-0 mx-auto max-w-screen-xl lg:py-8 lg:px-6\">\n                <div className='max-w-5xl mx-auto'>\n                    <div className='grid grid-cols-4 sm:grid-cols-4 xs:grid-cols-1 gap-4 sm:gap-0 xs:gap-0'>\n                        <div className='col-span-3 md:col-span-3 sm:col-span-3 xs:col-span-1'>\n                            <Suspense fallback={<Spinner />}>\n                                <Encrypt />\n                            </Suspense>\n                        </div>\n                        <div className='col-span-1 md:col-span-1 sm:col-span-1 xs:col-span-1'>\n                            <Suspense fallback={<Spinner />}>\n                                <Decrypt setInput={setInput} setEncryptionEnabled={setEncryptionEnabled} setStringToDecrypt={setStringToDecrypt} password={password} setPassword={setPassword} setDecryptedText={setDecryptedText} />\n                            </Suspense>\n                        </div>\n                    </div>\n                    <h4 className=\"transition duration-500 mb-2 h4 sm:hidden xs:hidden text-2xl text-left font-bold dark:text-white\"><FontAwesomeIcon icon={faCrow} inverse /></h4>\n                    <canvas id=\"canvas\" ref={canvasRef} height={canvasHeight} width={canvasWidth} className='w-full rounded-lg xs:mt-4 sm:mt-4 bg-slate-100 dark:bg-slate-700 min-h-4' />\n                </div>\n            </div>\n            <ToastContainer\n                position=\"bottom-left\"\n                autoClose={2000}\n                limit={2}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss={false}\n                draggable\n                theme={theme}\n                pauseOnHover={false}\n                transition={Slide}\n            />\n        </section>\n    );\n}\n\nexport default Translate"],"file":"public/Translate-BI1LxRxI.js"}