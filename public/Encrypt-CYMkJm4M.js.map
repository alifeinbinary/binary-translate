{"version":3,"file":"Encrypt-CYMkJm4M.js","sources":["../../node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js","../../node_modules/@apollo/client/react/hooks/useMutation.js","../../node_modules/@fortawesome/free-solid-svg-icons/faCircleInfo.js","../../src/utils/save.ts","../../src/components/DownloadImageButton.tsx","../../src/components/NodeSize.tsx","../../src/hooks/useCreateBinaryFeedImage.ts","../../src/hooks/useCreateBinaryImagePost.ts","../../src/hooks/useGetPreSignedPostPayload.ts","../../src/api/uploadFileToS3.ts","../../src/components/PostImageButton.tsx","../../src/components/Encrypt.tsx"],"sourcesContent":["import * as React from \"rehackt\";\nimport { canUseDOM } from \"../../../utilities/index.js\";\n// use canUseDOM here instead of canUseLayoutEffect because we want to be able\n// to use useLayoutEffect in our jest tests. useLayoutEffect seems to work fine\n// in useSuspenseQuery tests, but to honor the original comment about the\n// warnings for useSyncExternalStore implementation, canUseLayoutEffect is left\n// alone.\nexport var useIsomorphicLayoutEffect = canUseDOM ? React.useLayoutEffect : React.useEffect;\n//# sourceMappingURL=useIsomorphicLayoutEffect.js.map","import { __assign } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation(mutation, options) {\n    var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n    verifyDocumentType(mutation, DocumentType.Mutation);\n    var _a = React.useState({\n        called: false,\n        loading: false,\n        client: client,\n    }), result = _a[0], setResult = _a[1];\n    var ref = React.useRef({\n        result: result,\n        mutationId: 0,\n        isMounted: true,\n        client: client,\n        mutation: mutation,\n        options: options,\n    });\n    useIsomorphicLayoutEffect(function () {\n        Object.assign(ref.current, { client: client, options: options, mutation: mutation });\n    });\n    var execute = React.useCallback(function (executeOptions) {\n        if (executeOptions === void 0) { executeOptions = {}; }\n        var _a = ref.current, options = _a.options, mutation = _a.mutation;\n        var baseOptions = __assign(__assign({}, options), { mutation: mutation });\n        var client = executeOptions.client || ref.current.client;\n        if (!ref.current.result.loading &&\n            !baseOptions.ignoreResults &&\n            ref.current.isMounted) {\n            setResult((ref.current.result = {\n                loading: true,\n                error: void 0,\n                data: void 0,\n                called: true,\n                client: client,\n            }));\n        }\n        var mutationId = ++ref.current.mutationId;\n        var clientOptions = mergeOptions(baseOptions, executeOptions);\n        return client\n            .mutate(clientOptions)\n            .then(function (response) {\n            var _a, _b;\n            var data = response.data, errors = response.errors;\n            var error = errors && errors.length > 0 ?\n                new ApolloError({ graphQLErrors: errors })\n                : void 0;\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (error && onError) {\n                onError(error, clientOptions);\n            }\n            if (mutationId === ref.current.mutationId &&\n                !clientOptions.ignoreResults) {\n                var result_1 = {\n                    called: true,\n                    loading: false,\n                    data: data,\n                    error: error,\n                    client: client,\n                };\n                if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n                    setResult((ref.current.result = result_1));\n                }\n            }\n            var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);\n            if (!error) {\n                onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n            }\n            return response;\n        })\n            .catch(function (error) {\n            var _a;\n            if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n                var result_2 = {\n                    loading: false,\n                    error: error,\n                    data: void 0,\n                    called: true,\n                    client: client,\n                };\n                if (!equal(ref.current.result, result_2)) {\n                    setResult((ref.current.result = result_2));\n                }\n            }\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (onError) {\n                onError(error, clientOptions);\n                // TODO(brian): why are we returning this here???\n                return { data: void 0, errors: error };\n            }\n            throw error;\n        });\n    }, []);\n    var reset = React.useCallback(function () {\n        if (ref.current.isMounted) {\n            var result_3 = {\n                called: false,\n                loading: false,\n                client: ref.current.client,\n            };\n            Object.assign(ref.current, { mutationId: 0, result: result_3 });\n            setResult(result_3);\n        }\n    }, []);\n    React.useEffect(function () {\n        var current = ref.current;\n        current.isMounted = true;\n        return function () {\n            current.isMounted = false;\n        };\n    }, []);\n    return [execute, __assign({ reset: reset }, result)];\n}\n//# sourceMappingURL=useMutation.js.map","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nvar prefix = 'fas';\nvar iconName = 'circle-info';\nvar width = 512;\nvar height = 512;\nvar aliases = [\"info-circle\"];\nvar unicode = 'f05a';\nvar svgPathData = 'M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336l24 0 0-64-24 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l48 0c13.3 0 24 10.7 24 24l0 88 8 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-80 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z';\n\nexports.definition = {\n  prefix: prefix,\n  iconName: iconName,\n  icon: [\n    width,\n    height,\n    aliases,\n    unicode,\n    svgPathData\n  ]};\n\nexports.faCircleInfo = exports.definition;\nexports.prefix = prefix;\nexports.iconName = iconName;\nexports.width = width;\nexports.height = height;\nexports.ligatures = aliases;\nexports.unicode = unicode;\nexports.svgPathData = svgPathData;\nexports.aliases = aliases;","/*\n *   Copyright (c) 2024 Andrew Halliwell\n\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { saveAs } from \"file-saver\";\nimport { addMetadata } from \"meta-png\";\nimport { Id, toast } from \"react-toastify\";\nimport { CreatePngWithMetadataResult, Dimensions } from \"../types\";\n\n// Common display dimensions\nconst displayDimensions: { [key: string]: Dimensions } = {\n    \"3840x2160\": { width: 3840, height: 2160 },\n    \"3200x1800\": { width: 3200, height: 1800 },\n    \"2880x1620\": { width: 2880, height: 1620 },\n    \"2560x1600\": { width: 2560, height: 1600 },\n    \"2560x1440\": { width: 2560, height: 1440 },\n    \"2048x1536\": { width: 2048, height: 1536 },\n    \"1920x1080\": { width: 1920, height: 1080 },\n    \"1680x1050\": { width: 1680, height: 1050 },\n    \"1600x900\": { width: 1600, height: 900 },\n    \"1366x768\": { width: 1366, height: 768 },\n    \"968x544\": { width: 968, height: 544 },\n};\n\n/**\n * Trim the transparent pixels from the edges of a canvas and draw a\n * watermark onto the trimmed image.\n *\n * @param canvas The canvas to trim\n * @returns A promise resolving to the trimmed canvas\n */\nfunction trimImageFromCanvas(\n    canvas: HTMLCanvasElement,\n    watermark: boolean,\n): Promise<HTMLCanvasElement> {\n    if (!canvas) throw new Error(\"Canvas is not defined\");\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) throw new Error(\"Failed to get canvas context\");\n\n    const width = canvas.width;\n    const height = canvas.height;\n\n    const imageData = ctx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n\n    let top = height,\n        left = width,\n        right = 0,\n        bottom = 0;\n\n    // Loop through each pixel to find the bounding box of non-transparent pixels\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            const alpha = data[(y * width + x) * 4 + 3]; // Get alpha value of the pixel\n            if (alpha > 0) {\n                // If the pixel is not fully transparent\n                if (x < left) left = x;\n                if (x > right) right = x;\n                if (y < top) top = y;\n                if (y > bottom) bottom = y;\n            }\n        }\n    }\n\n    // Calculate the trimmed width and height\n    const trimmedWidth = right - left + 1;\n    const trimmedHeight = bottom - top + 1;\n\n    // Create a new canvas to store the trimmed content\n    const trimmedCanvas = document.createElement(\"canvas\");\n    trimmedCanvas.width = trimmedWidth;\n    trimmedCanvas.height = trimmedHeight + 50;\n    const trimmedCtx = trimmedCanvas.getContext(\"2d\");\n    if (!trimmedCtx) throw new Error(\"Failed to get trimmed canvas context\");\n\n    trimmedCtx.imageSmoothingEnabled = true;\n    trimmedCtx.imageSmoothingQuality = \"high\";\n\n    if (watermark) {\n        // Draw a watermark onto the trimmed canvas\n        trimmedCtx.font = \"normal 36px Tahoma\";\n        trimmedCtx.fontKerning = \"none\";\n        trimmedCtx.textRendering = \"geometricPrecision\";\n        trimmedCtx.fillStyle = \"#ffeedd\";\n        trimmedCtx.fillText(\n            \"Decode this image at stegg.alifeinbinary.com\",\n            trimmedWidth - 700,\n            trimmedHeight + 42,\n        );\n    }\n\n    // Draw the trimmed content onto the new canvas\n    trimmedCtx.putImageData(\n        ctx.getImageData(left, top, trimmedWidth, trimmedHeight),\n        0,\n        0,\n    );\n\n    return Promise.resolve(trimmedCanvas);\n}\n\n/**\n * Takes a trimmed canvas, a key (from displayDimensions), and an action (either \"download\" or \"upload\"), and returns a new canvas with the image scaled down to fit within the given dimensions.\n * If the action is \"download\", the image is scaled down to fit within the given dimensions with 10% padding.\n * If the action is \"upload\", the image is scaled down to fit within the given dimensions with no padding.\n * @param trimmedCanvas The trimmed canvas containing the image to be scaled.\n * @param key The key to use when looking up the display dimensions.\n * @param action The action to take when scaling the image, either \"download\" or \"upload\".\n * @returns A new canvas with the scaled image.\n */\nasync function scaleCanvas(\n    trimmedCanvas: HTMLCanvasElement,\n    key: string,\n    action: string,\n): Promise<HTMLCanvasElement> {\n    const img = new Image();\n    const url = URL.createObjectURL(await getCanvasBlob(trimmedCanvas));\n    img.src = url;\n\n    return new Promise((resolve, reject) => {\n        img.onload = async () => {\n            const { width: displayWidth, height: displayHeight } =\n                displayDimensions[key];\n            const originalWidth = img.width;\n            const originalHeight = img.height;\n\n            const canvas = document.createElement(\"canvas\");\n            const ctx = canvas.getContext(\"2d\")!;\n            await img.decode();\n\n            let scaledWidth = displayWidth;\n            let scaledHeight = (originalHeight / originalWidth) * scaledWidth;\n\n            if (action === \"download\" && scaledHeight > displayHeight) {\n                scaledHeight = displayHeight;\n                scaledWidth = (originalWidth / originalHeight) * scaledHeight;\n            }\n\n            if (action === \"download\") {\n                scaledWidth *= 0.9; // Apply 10% padding\n                scaledHeight *= 0.9;\n            }\n\n            canvas.width = displayWidth;\n            canvas.height =\n                action === \"download\" ? displayHeight : scaledHeight;\n\n            const posX = (canvas.width - scaledWidth) / 2;\n            const posY = (canvas.height - scaledHeight) / 2;\n\n            ctx.imageSmoothingEnabled = true;\n            ctx.imageSmoothingQuality = \"high\";\n            ctx.drawImage(img, posX, posY, scaledWidth, scaledHeight);\n\n            URL.revokeObjectURL(url);\n\n            if (canvas) {\n                resolve(canvas);\n            } else {\n                reject(new Error(\"Failed to create canvas\"));\n            }\n        };\n        img.onerror = () => {\n            URL.revokeObjectURL(url); // Clean up on error\n            reject(new Error(\"Failed to load image\"));\n        };\n    });\n}\n// For refactoring\n// function createCanvas(width: number, height: number): HTMLCanvasElement {\n//     const canvas = document.createElement(\"canvas\");\n//     canvas.width = width;\n//     canvas.height = height;\n//     return canvas;\n// }\n\n// function drawImage(\n//     ctx: CanvasRenderingContext2D,\n//     img: HTMLImageElement,\n//     imgWidth: number,\n//     imgHeight: number,\n//     displayWidth: number,\n//     displayHeight: number,\n// ) {\n//     const posX = (displayWidth - imgWidth) / 2;\n//     const posY = (displayHeight - imgHeight) / 2;\n//     ctx.imageSmoothingEnabled = true;\n//     ctx.imageSmoothingQuality = \"high\";\n//     ctx.drawImage(img, posX, posY, imgWidth, imgHeight);\n// }\n\n/**\n * Saves a blob to disk with the given filename.\n * @param {Blob} blob The blob to save to disk.\n * @param {string} fileName The filename to save the blob as.\n */\nfunction saveToDisk(blob: Blob, fileName: string) {\n    const fileAndFunction = \"save.saveToDisk: \";\n    const blobUrl = URL.createObjectURL(blob);\n\n    console.debug(fileAndFunction + \"blobUrl: \", blobUrl);\n    if (fileName) {\n        fetch(blobUrl)\n            .then((response) => response.blob())\n            .then((blob) => saveAs(blob, fileName));\n        // URL.revokeObjectURL(blobUrl); // Clean up the object URL\n    } else {\n        console.error(fileAndFunction + \"Failed to get filename\");\n    }\n}\n\n/**\n * Takes a canvas, a string message, and a boolean encryptionEnabled, and returns a new PNG blob with the message and encryptionEnabled set as metadata.\n * @param {HTMLCanvasElement} canvas The canvas to get the PNG data from.\n * @param {string} message The message to add to the PNG metadata.\n * @param {boolean} encryptionEnabled The boolean to add to the PNG metadata, indicating whether the message is encrypted or not.\n * @returns {Promise<Blob>} A promise resolving to a new PNG blob with the metadata added.\n */\nasync function addMetadataToPng(\n    canvas: HTMLCanvasElement,\n    message: string,\n    encryptionEnabled: boolean,\n): Promise<Blob> {\n    if (!canvas) {\n        throw new Error(\"Canvas is not defined\");\n    }\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        throw new Error(\"Failed to get canvas context\");\n    }\n    // Get the binary data of the PNG blob\n    const blob = await new Promise<Blob>((resolve, reject) => {\n        canvas.toBlob((blob) => {\n            if (blob) {\n                resolve(blob);\n            } else {\n                reject(new Error(\"Failed to create blob\"));\n            }\n        }, \"image/png\");\n    });\n    const buffer = await blob.arrayBuffer();\n    const pngData = new Uint8Array(buffer);\n\n    const withVersion = addMetadata(pngData, \"Stegversion\", \"1.0\");\n\n    const withMessage = addMetadata(withVersion, \"Message\", message);\n    const withBoolean = addMetadata(\n        withMessage,\n        \"Encrypted\",\n        encryptionEnabled.toString(),\n    );\n    return Promise.resolve(new Blob([withBoolean]));\n}\n\n/**\n * Given an encrypted text, returns a filename for the PNG file.\n *\n * The filename is of the form: \"alifeinbinary_com-<first 8 characters of the encrypted text>.png\"\n *\n * @param encryptionEnabled Whether the text is encrypted.\n * @param encryptedText The encrypted text.\n * @throws Error If no encrypted text is provided.\n * @returns A filename for the PNG file.\n */\nfunction getFilename(\n    encryptionEnabled: boolean,\n    encryptedText: string,\n): Promise<string> {\n    if (encryptedText) {\n        console.debug(\n            \"save.createPngWithMetadata: Encrypted Text\",\n            encryptedText,\n        );\n        const filename = `alifeinbinary_com-${encryptionEnabled ? encryptedText.slice(7, 15) : Math.floor(Math.random() * 10000)}.png`;\n\n        return Promise.resolve(filename); // Return filename;\n    } else {\n        throw new Error(\"No encrypted text provided\");\n    }\n}\n\n/**\n * Get a PNG blob from a canvas.\n * @param {HTMLCanvasElement} canvas The canvas to get a blob from.\n * @returns {Promise<Blob>} A promise that resolves with the blob.\n */\nfunction getCanvasBlob(canvas: HTMLCanvasElement): Promise<Blob> {\n    return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n            if (blob) {\n                resolve(blob);\n            } else {\n                reject(new Error(\"Failed to create blob\"));\n            }\n        }, \"image/png\");\n    });\n}\n\n/**\n * Creates a PNG blob from a canvas with metadata and either downloads the image\n * or returns a blob and filename for posting.\n *\n * @param {HTMLCanvasElement} canvas The canvas to get a blob from.\n * @param {string} key The string key into the display dimensions map.\n * @param {string} action The action to perform: 'download' or 'post'.\n * @param {boolean} encryptionEnabled Whether the text is encrypted.\n * @param {string} encryptedText The encrypted text.\n * @param {string} input The input text.\n * @param {Id} toastId The toast Id.\n * @returns {Promise<{ payloadImage: Blob; filename: string }>} A promise that\n * resolves with a blob and a filename.\n */\nfunction createPngWithMetadata(\n    canvas: HTMLCanvasElement,\n    key: string,\n    action: string,\n    encryptionEnabled: boolean,\n    encryptedText: string,\n    input: string,\n    toastId: Id,\n): Promise<{\n    payloadImage: Blob;\n    filename: string;\n    outputWidth: number;\n    outputHeight: number;\n}> {\n    const message = encryptionEnabled ? encryptedText : input;\n    // const fileAndFunction = `save.createPngWithMetadata[${action}]: `;\n\n    /**\n     * Update the toast message with the given error message and set the type\n     * to \"error\". Returns the error message as an Error object.\n     * @param {string} errMsg The error message to display in the toast.\n     * @returns {Error} The error message as an Error object.\n     */\n    const handleBlobError = (errMsg: string) => {\n        toast.update(toastId, {\n            render: errMsg,\n            type: \"error\",\n            isLoading: false,\n            autoClose: 2000,\n        });\n        return new Error(errMsg);\n    };\n\n    /**\n     * Update the toast message with the given text and progress value.\n     * @param {string} infoMsg The text to display in the toast.\n     * @param {number} progress The progress value to display in the toast.\n     */\n    const handleBlobInfo = (infoMsg: string, progress: number) => {\n        toast.update(toastId, {\n            render: infoMsg,\n            type: \"info\",\n            isLoading: false,\n            autoClose: 2000,\n            progress: progress,\n        });\n    };\n\n    /**\n     * Adds metadata to the blob and resolves with an object containing the\n     * modified blob and a filename.\n     * @param {Blob} blob The blob to modify.\n     * @returns {Promise<{ payloadImage: Blob; filename: string }>} A promise\n     * that resolves with an object containing the modified blob and a\n     * filename.\n     */\n    const handleMetadataAndResolve = async (\n        canvas: HTMLCanvasElement,\n    ): Promise<CreatePngWithMetadataResult> => {\n        const fileAndFunction = \"save.handleMetadataAndResolve: \";\n\n        if (!(canvas instanceof HTMLCanvasElement))\n            throw handleBlobError(\"Canvas is not a canvas\");\n\n        handleBlobInfo(\"Adding metadata to image\", 0.18);\n        const payloadImage = await addMetadataToPng(\n            canvas,\n            message,\n            encryptionEnabled,\n        );\n\n        console.debug(\n            fileAndFunction + \"canvasDimensions\",\n            canvas.width,\n            canvas.height,\n        );\n\n        if (!(payloadImage instanceof Blob))\n            throw handleBlobError(\"Payload is not a Blob\");\n\n        handleBlobInfo(\"Creating filename\", 0.2);\n        const filename = await getFilename(encryptionEnabled, message);\n        if (!filename) throw handleBlobError(\"No filename\");\n\n        return {\n            payloadImage,\n            filename,\n            outputWidth: canvas.width,\n            outputHeight: canvas.height,\n        };\n    };\n\n    return new Promise(async (resolve, reject) => {\n        try {\n            if (action === \"download\") {\n                handleBlobInfo(\"Trimming and scaling canvas\", 0.14);\n\n                const trimmedCanvas = await trimImageFromCanvas(canvas, false);\n                const scaledCanvas = await scaleCanvas(\n                    trimmedCanvas,\n                    key,\n                    action,\n                );\n\n                const { payloadImage, filename } =\n                    await handleMetadataAndResolve(scaledCanvas);\n                handleBlobInfo(\"Saving image to disk\", 1.0);\n\n                saveToDisk(payloadImage, filename);\n            } else if (action === \"post\") {\n                handleBlobInfo(\"Scaling canvas\", 0.14);\n\n                const trimmedCanvas = await trimImageFromCanvas(canvas, true);\n                const scaledCanvas = await scaleCanvas(\n                    trimmedCanvas,\n                    key,\n                    action,\n                );\n                console.debug(\n                    \"save.createPngWithMetadata: scaledCanvas\",\n                    scaledCanvas,\n                );\n                const { payloadImage, filename, outputWidth, outputHeight } =\n                    await handleMetadataAndResolve(scaledCanvas);\n\n                handleBlobInfo(\"Returning payload for post\", 0.22);\n                resolve({\n                    payloadImage,\n                    filename,\n                    outputWidth: outputWidth,\n                    outputHeight: outputHeight,\n                });\n            } else {\n                throw handleBlobError(\"Invalid action\");\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport { createPngWithMetadata, displayDimensions, saveToDisk };\n","/*\n *   Copyright (c) 2024 Andrew Halliwell\n\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { faFloppyDisk } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Dropdown, Tooltip } from \"flowbite-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { displayDimensions, createPngWithMetadata } from \"../utils/save\";\nimport { useImageState } from \"../utils/stores\";\nimport { clearContx } from \"../utils/translate\";\nimport { toast } from \"react-toastify\";\nimport { customDropdownTheme } from \"../utils/customTheme\";\n\n/**\n * DownloadImageButton is a component that generates a dropdown menu with different image\n * dimensions that can be downloaded with the input text embedded in the image.\n *\n * If the encryptionEnabled state is true, the component will only be clickable if the\n * password and input states are not empty.\n *\n * When the user clicks the download button, the component will call the createPngWithMetadata\n * function to generate a PNG image with the input text embedded in the image, and the\n * image dimensions set to the selected value from the dropdown menu.\n *\n * The component will also call the clearContx function to clear the canvas context.\n *\n * The component will display a tooltip with the input length and the translation for\n * \"downloadimagebutton.tooltip.title\" if the input length is greater than 0.\n * Otherwise, the tooltip will display the translation for \"downloadimagebutton.tooltip.hint\".\n *\n * The component will also display a label with the translation for \"downloadimagebutton.label\".\n * The label will be hidden from screen readers.\n *\n * The component will be disabled if the input length is 0.\n */\nconst DownloadImageButton: React.FC = () => {\n    const { t } = useTranslation();\n\n    const {\n        canvasRef,\n        input,\n        setInput,\n        setOutput,\n        encryptionEnabled,\n        setEncryptionEnabled,\n        password,\n        setPassword,\n        encryptedText,\n        setEncryptedText,\n        setDecryptedText,\n    } = useImageState();\n\n    const handleSaveVisibility = () => {\n        if (encryptionEnabled) {\n            if (!password || !input) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            if (input.length > 0) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    };\n\n    const handleDownload = async (key: string) => {\n        const action = \"download\";\n        const toastId = toast(\"Saving...\", { autoClose: false, isLoading: true });\n\n        if (canvasRef && canvasRef.current && input) {\n            const canvas = canvasRef.current;\n            await createPngWithMetadata(canvas, key, action, encryptionEnabled, encryptedText, input, toastId);\n            clearContx(canvasRef);\n        }\n\n        setInput(\"\");\n        setPassword(\"\");\n        setEncryptedText(\"\");\n        setDecryptedText(\"\");\n        setEncryptionEnabled(false);\n        setOutput([]);\n    };\n\n    return (\n        <>\n            <Tooltip\n                content={\n                    input.length\n                        ? t(\"downloadimagebutton.tooltip.title\")\n                        : t(\"downloadimagebutton.tooltip.hint\")\n                }\n                placement=\"top-start\"\n                trigger=\"hover\"\n            >\n                <label htmlFor=\"btn-download\" className=\"sr-only\">\n                    {t(\"downloadimagebutton.label\")}\n                </label>\n                <Dropdown\n                    theme={customDropdownTheme}\n                    id=\"btn-download\"\n                    disabled={!input.length}\n                    tabIndex={0}\n                    placement=\"bottom-start\"\n                    dismissOnClick={true}\n                    className={`inline-flex items-center justify-center rounded-lg text-center text-sm font-medium transition duration-300 ease-in-out dark:hover:bg-slate-800 ${handleSaveVisibility() ? \"cursor-not-allowed bg-gray-200/[0.5] text-gray-600 hover:ring-transparent focus:ring-0\" : \"bg-gray-100 text-white focus:ring-4 dark:bg-slate-800 dark:text-slate-900\"}`}\n                    label={\n                        <>\n                            <FontAwesomeIcon icon={faFloppyDisk} />\n                            <span className=\"sr-only\">\n                                {t(\"downloadimagebutton.label\")}\n                            </span>\n                        </>\n                    }\n                >\n                    <Dropdown.Header>Select dimensions</Dropdown.Header>\n                    {Object.keys(displayDimensions).map((key) => (\n                        <Dropdown.Item\n                            onClick={() => {\n                                handleDownload(key);\n                            }}\n                            key={key}\n                        >\n                            {key.replace(\"x\", \" x \")}\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown>\n            </Tooltip>\n        </>\n    );\n};\n\nexport default DownloadImageButton;\n","/*\n *   Copyright (c) 2024 Andrew Halliwell\n\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { useImageState } from '../utils/stores';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * Slider component to select the size of the nodes in the graph.\n * \n * @returns A div containing a range input and four labels \n * that indicate the size of the nodes for different screen sizes.\n */\nconst Slider: React.FC = () => {\n\n    const { t } = useTranslation();\n\n    const [size, setSize] = useImageState(state => [state.size, state.setSize]);\n\n    function handleSliderChange(event: React.ChangeEvent<HTMLInputElement>) {\n        setSize(Math.floor(Number(event.target.value)));\n    }\n    return (\n        <div className=\"relative lg:w-60 md:w-40 sm:w-48 mb-6 mx-3\">\n            <label htmlFor=\"labels-range-input\" className=\"xs:sr-only text-left block mb-0 text-xs font-medium text-gray-900 dark:text-white\">{t('nodesize.label')}</label>\n            <input id=\"labels-range-input\" tabIndex={0} type=\"range\" min=\"36\" max=\"66\" value={size} step=\"10\" onChange={(e) => handleSliderChange(e)} className=\"w-full h-1 mb-1 range-sm text-blue-900 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\" />\n            <span className=\"text-xs uppercase text-gray-500 dark:text-gray-400 absolute start-0 -bottom-4\">sm</span>\n            <span className=\"text-xs uppercase text-gray-500 dark:text-gray-400 absolute start-1/3 -translate-x-1/2 rtl:translate-x-1/2 -bottom-4\">md</span>\n            <span className=\"text-xs uppercase text-gray-500 dark:text-gray-400 absolute start-2/3 -translate-x-1/2 rtl:translate-x-1/2 -bottom-4\">lg</span>\n            <span className=\"text-xs uppercase text-gray-500 dark:text-gray-400 absolute end-0 -bottom-4\">xl</span>\n        </div>\n    )\n}\n\nexport default Slider","/*\n *   Copyright (c) 2024 Andrew Halliwell\n\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { useMutation } from \"@apollo/client\";\nimport { CREATE_BINARYFEEDIMAGE } from \"../api/api\";\n\ninterface FmFileResponse {\n    file: File;\n    data: {\n        id: string;\n        createdOn: string;\n        savedOn: string;\n        createdBy: string;\n        modifiedBy: string;\n        savedBy: string;\n        src: string;\n        location: {\n            folderId: string;\n        };\n        name: string;\n        key: string;\n        type: string;\n        size: number;\n        meta: {\n            private: boolean;\n            width: number;\n            height: number;\n            originalKey: string;\n        };\n        tags: string[];\n        aliases: string[];\n    };\n    error: string;\n}\n\n/**\n * Creates a binary image for the post\n * @param fileInput An array of strings, where each string is a binary representation of a file\n * @returns A promise that resolves to an object with a file property, which is an object with properties id, createdOn, savedOn, createdBy, modifiedBy, savedBy, src, location, name, key, type, size, meta, tags, and aliases\n */\nexport const useCreateBinaryFeedImage = () => {\n    const [createFileMutation] = useMutation(CREATE_BINARYFEEDIMAGE, {\n        context: {\n            apiName: \"main\",\n        },\n    });\n\n    /**\n     * Creates a binary image for the post\n     * @param fileInput An array of strings, where each string is a binary representation of a file\n     * @returns A promise that resolves to an object with a file property, which is an object with properties id, createdOn, savedOn, createdBy, modifiedBy, savedBy, src, location, name, key, type, size, meta, tags, and aliases\n     */\n    const createBinaryFeedImage = async (\n        fileInput: string[],\n    ): Promise<FmFileResponse> => {\n        await createFileMutation({\n            variables: {\n                data: fileInput,\n            },\n        });\n\n        return new Promise((resolve) => {\n            resolve({} as FmFileResponse);\n        });\n    };\n    return { createBinaryFeedImage };\n};\n","/*\n *   Copyright (c) 2024 Andrew Halliwell\n\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { useMutation } from \"@apollo/client\";\nimport { CREATE_BINARYIMAGEPOST, PUBLISH_BINARYIMAGEPOST } from \"../api/api\";\n\n/**\n * Provides a mutation that can be used to create a binary image post in the database.\n * @returns An object containing two functions: createBinaryImagePost and publishBinaryImagePost.\n * createBinaryImagePost creates a binary image post in the database and returns the ID of the newly created post.\n * publishBinaryImagePost publishes a binary image post.\n */\nexport const useCreateBinaryImagePost = () => {\n    const [createFileMutation] = useMutation(CREATE_BINARYIMAGEPOST, {\n        context: {\n            apiName: \"manage\",\n        },\n    });\n\n    const [publishMutation] = useMutation(PUBLISH_BINARYIMAGEPOST, {\n        context: {\n            apiName: \"manage\",\n        },\n    });\n\n    /**\n     * Creates a binary image post for the feed.\n     * @param author The author of the post\n     * @param imageUrl The URL of the image to be posted\n     * @param width The width of the image\n     * @param height The height of the image\n     * @returns The ID of the newly created post\n     */\n    const createBinaryImagePost = async (\n        author: string,\n        imageUrl: string,\n        width: number,\n        height: number,\n    ) => {\n        const timestamp = Date.now();\n        const datePosted = new Date(timestamp).toISOString();\n        console.log(\"width\", width, \"height\", height);\n        const result = await createFileMutation({\n            variables: {\n                author,\n                image: imageUrl,\n                posted: datePosted,\n                width: width,\n                height: height,\n            },\n        });\n        return result.data.createBinaryImagePost.data.id;\n    };\n\n    /**\n     * Publishes a binary image post.\n     * @param id The ID of the post to be published\n     * @returns The result of the mutation\n     */\n    const publishBinaryImagePost = async (id: string) => {\n        return publishMutation({\n            variables: {\n                id,\n                meta: {\n                    status: \"published\",\n                },\n            },\n        });\n    };\n\n    return { createBinaryImagePost, publishBinaryImagePost };\n};\n","/*\n *   Copyright (c) 2024 Andrew Halliwell\n\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { useQuery } from \"@apollo/client\";\nimport { GET_PRE_SIGNED_POST_PAYLOAD } from \"../api/api\";\n\n/*\n * Get a pre-signed post payload for uploading a file\n * @param file The file to upload\n * @returns The pre-signed post payload\n * @example\n * const { getPreSignedPostPayload } = useGetPreSignedPostPayload();\n */\nexport const useGetPreSignedPostPayload = () => {\n    const { refetch } = useQuery(GET_PRE_SIGNED_POST_PAYLOAD, {\n        context: {\n            apiName: \"main\",\n        },\n    });\n\n    /**\n     * Get a pre-signed post payload for uploading a file\n     * @param file The file to upload, with properties name, type, and size\n     * @returns The pre-signed post payload\n     * @example\n     * const { getPreSignedPostPayload } = useGetPreSignedPostPayload();\n     * const file = {\n     *     name: \"example.jpg\",\n     *     type: \"image/jpeg\",\n     *     size: 1024,\n     * };\n     * const payload = await getPreSignedPostPayload(file);\n     */\n    const getPreSignedPostPayload = async (file: {\n        name: string;\n        type: string;\n        size: number;\n    }) => {\n        return refetch({\n            data: {\n                name: file.name,\n                type: file.type,\n                size: file.size,\n            },\n        });\n    };\n\n    return { getPreSignedPostPayload };\n};\n","/*\n *   Copyright (c) 2024 Andrew Halliwell\n\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { PreSignedPostPayloadProps } from \"../types.d\";\n\nexport const uploadFileToS3 = (\n    presignedPostData: PreSignedPostPayloadProps,\n    file: Blob,\n) => {\n    console.debug(\"presignedPostData\", presignedPostData);\n    console.debug(\"Uploading file to S3...\");\n\n    return new Promise((resolve, reject) => {\n        const formData = new FormData();\n        Object.keys(presignedPostData.data.fields).forEach((key) => {\n            formData.append(key, presignedPostData.data.fields[key]);\n        });\n        // Actual file has to be appended last.\n        formData.append(\"file\", file);\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", presignedPostData.data.url, true);\n        xhr.send(formData);\n        xhr.onload = function () {\n            // this.status === 204 ? resolve() : reject(this.responseText);\n            if (xhr.status === 204) {\n                resolve(xhr.response);\n                console.debug(\"File uploaded successfully\", xhr.response);\n                return xhr.response.url;\n            } else {\n                reject(xhr.response);\n                console.error(\"File upload failed:\", xhr.response);\n            }\n        };\n    });\n};\n","/*\n *   Copyright (c) 2024 Andrew Halliwell\n\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport { Tooltip } from \"flowbite-react/components/Tooltip\";\nimport { useCreateBinaryFeedImage } from \"../hooks/useCreateBinaryFeedImage\";\nimport { useCreateBinaryImagePost } from \"../hooks/useCreateBinaryImagePost\";\nimport { useGetPreSignedPostPayload } from \"../hooks/useGetPreSignedPostPayload\";\nimport { clearContx } from \"../utils/translate\";\nimport { createPngWithMetadata } from \"../utils/save\";\nimport { useImageState } from \"../utils/stores\";\nimport { toast } from \"react-toastify\";\nimport { uploadFileToS3 } from \"../api/uploadFileToS3\";\nimport { useTranslation } from \"react-i18next\";\n\n/**\n * Renders a button that allows the user to post the current image to their feed.\n *\n * @remarks\n * The button is only visible if the user has entered a message and the image is not encrypted.\n * If the button is clicked and the image is encrypted, the button creates a new binary image post in the database.\n * If the button is clicked and the image is not encrypted, the button shows a toast message indicating that encryption is disabled.\n * The button is disabled if the user has not entered a message or the image is not encrypted.\n *\n * @returns A JSX element containing a button that allows the user to post the current image to their feed.\n */\nconst PostImageButton: React.FC = () => {\n\n    const { t } = useTranslation();\n\n    const [author, setAuthor] = useState(\"\");\n\n    const {\n        canvasRef,\n        input,\n        password,\n        encryptedText,\n        encryptionEnabled,\n        setOutput\n    } = useImageState();\n\n    const { getPreSignedPostPayload } = useGetPreSignedPostPayload();\n    const { createBinaryFeedImage } = useCreateBinaryFeedImage();\n    const { createBinaryImagePost, publishBinaryImagePost } = useCreateBinaryImagePost();\n\n    const handlePostVisibility = () => {\n        if (encryptionEnabled) {\n            if (!input || !password) {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (!encryptionEnabled) {\n            if (!input) {\n                return true;\n            } else {\n                return true;\n            }\n        } else {\n            return false;\n        }\n    };\n\n    const handlePost = async (event: React.MouseEvent<HTMLButtonElement>) => {\n        event.preventDefault();\n\n        const action = \"post\";\n        const toastId = toast(t(\"postimagebutton.toast.processing\"), { autoClose: false, isLoading: true });\n\n        if (canvasRef && canvasRef.current && input) {\n\n            if (encryptionEnabled) {\n\n                toast.update(toastId, {\n                    render: t(\"postimagebutton.toast.embedding\"),\n                    type: \"info\",\n                    isLoading: false,\n                    autoClose: 2000,\n                    progress: 0.0\n                });\n\n                // CREATE PNG WITH METADATA\n                const { payloadImage, filename, outputWidth, outputHeight } = await createPngWithMetadata(canvasRef.current, \"968x544\", action, encryptionEnabled, encryptedText, input, toastId);\n\n                console.debug(\"fileName\", filename, \"url\", payloadImage);\n                toast.update(toastId, {\n                    render: t(\"postimagebutton.toast.size\"),\n                    type: \"info\",\n                    isLoading: false,\n                    autoClose: 2000,\n                    progress: 0.14\n                })\n\n                // GET BLOB FROM PNG AND FILE SIZE\n                // const { blob, size } = await fetchBlobAndGetSize(payloadImage);\n\n                console.debug(\"blob\", payloadImage, \"size\", payloadImage.size);\n                toast.update(toastId, {\n                    render: t(\"postimagebutton.toast.presignedpayload\"),\n                    type: \"info\",\n                    isLoading: false,\n                    autoClose: 2000,\n                    progress: 0.28\n                })\n\n                // GET PRE-SIGNED POST PAYLOAD\n                const { data } = await getPreSignedPostPayload({\n                    name: filename,\n                    type: \"image/png\",\n                    size: payloadImage.size,\n                })\n\n                console.debug(\"data\", data);\n                toast.update(toastId, {\n                    render: t(\"postimagebutton.toast.uploading\"),\n                    type: \"info\",\n                    isLoading: false,\n                    autoClose: 2000,\n                    progress: 0.42\n                })\n\n                const preSignedPostPayload = data?.fileManager.getPreSignedPostPayload.data;\n\n                console.debug(\"preSignedPostPayload\", preSignedPostPayload);\n\n                // UPLOAD FILE TO STORAGE\n                await uploadFileToS3(\n                    preSignedPostPayload,\n                    payloadImage,\n                );\n\n                // CONNECT THE FILE UPLOAD TO THE DATABASE REFERENCE OF THE IMAGE FILE\n                const fileInput = {\n                    ...preSignedPostPayload.file,\n                    tags: [\"binary-image\"],\n                    aliases: [],\n                    location: { folderId: \"66dab7609c00420008532f90#0001\" },\n                };\n                delete fileInput.__typename;\n\n                console.debug(\"fileInput\", fileInput);\n                toast.update(toastId, {\n                    render: t(\"postimagebutton.toast.createimage\"),\n                    type: \"info\",\n                    isLoading: false,\n                    autoClose: 2000,\n                    progress: 0.57\n                })\n\n                const createdFile = await createBinaryFeedImage(fileInput);\n\n                console.debug(\"createdFile\", createdFile);\n                toast.update(toastId, {\n                    render: t(\"postimagebutton.toast.createimagepost\"),\n                    type: \"info\",\n                    isLoading: false,\n                    autoClose: 2000,\n                    progress: 0.71\n                })\n\n                // CREATE BINARY IMAGE POST ENTRY WITH IMAGE, AUTHOR, AND DATE\n                const authorOrAnon = author ? author : \"Anon\";\n                const imageUrl = \"https://dj8rv0ejdatzv.cloudfront.net/files/\" + preSignedPostPayload.file.key;\n                const postId = await createBinaryImagePost(authorOrAnon, imageUrl, outputWidth, outputHeight);\n\n                console.debug(\"Binary image post created.\");\n                toast.update(toastId, {\n                    type: \"info\",\n                    render: t(\"postimagebutton.toast.publishing\"),\n                    isLoading: false,\n                    autoClose: 2000,\n                    progress: 0.85\n                })\n\n                // PUBLISH IMAGE POST\n                await publishBinaryImagePost(postId);\n\n                console.debug(\"Image published successfully!\");\n                toast.update(toastId, {\n                    type: \"success\",\n                    render: t(\"postimagebutton.toast.success\"),\n                    isLoading: false,\n                    autoClose: 2000,\n                    progress: 1.0\n                })\n\n            } else {\n                // IF ENCRYPTION IS DISABLED\n                console.debug(\"Encryption disabled\");\n                toast.update(toastId, {\n                    type: \"warning\",\n                    render: t(\"postimagebutton.toast.noencryption\"),\n                    isLoading: false,\n                    autoClose: 2000\n                });\n            }\n            clearContx(canvasRef);\n            setOutput([]);\n        } else {\n            // IF NO CANVAS IMAGE OR INPUT TEXT EXISTS\n            console.debug(\"No canvasRef or input\");\n            toast.update(toastId, {\n                type: \"warning\",\n                render: t(\"postimagebutton.toast.nocanvasorinput\"),\n                isLoading: false,\n                autoClose: 2000\n            })\n        }\n    };\n\n    return (\n        <div tabIndex={0} className='shadow-card p-1 flex h-[46px] items-center justify-center rounded-md text-gray-900 bg-gray-200 dark:bg-seablue'>\n            <input onChange={(e) => {\n                setAuthor(e.target.value);\n            }} data-testid=\"user-input\" value={author} type=\"text\" tabIndex={0} id=\"user-input\" disabled={false} className={`text-base rounded-none rounded-l-lg max-w-40 bg-gray-100 dark:bg-gray-100 border text-gray-900 focus:ring-transparent focus:border-transparent block flex-1 min-w-0 transition-width ease-in-out duration-1000 ${handlePostVisibility() ? 'w-0 px-0 py-2.5' : 'w-full p-2.5'} border-gray-200 focus:border-gray-200 dark:bg-gray-200 dark:border-seablue dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-none dark:focus:border-none`} placeholder={\"Author Name\"} />\n            <Tooltip content={password.length && input.length ? t(\"postimagebutton.tooltip.posttofeed\") : t(\"postimagebutton.tooltip.entermessage\")} placement=\"bottom\">\n                <button onClick={(e) => {\n                    handlePost(e)\n                }} disabled={!password.length || !input.length} className={`flex p-2 h-full w-24 ml-1 items-center justify-center transition ease-in-out duration-300 rounded text-base ${handlePostVisibility() ? 'cursor-not-allowed text-gray-600 bg-gray-200/[0.5] focus:ring-0 hover:ring-transparent' : 'text-white bg-sagegreen/[0.8] hover:bg-sagegreen/[1.0] focus:ring-blue-200 focus:ring-4'}`}>\n                    {t(\"postimagebutton.label\")} <FontAwesomeIcon icon={faPaperPlane} className=\"w-4 h-4 pl-2\" aria-hidden=\"true\" />\n                </button>\n            </Tooltip>\n        </div>\n    );\n};\n\nexport default PostImageButton;","/*\n *   Copyright (c) 2024 Andrew Halliwell\n\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons/faCircleInfo\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport type { CustomFlowbiteTheme } from \"flowbite-react\";\nimport { Button, List, Modal } from \"flowbite-react\";\nimport { useRef, useState } from \"react\";\nimport { useImageState } from \"../utils/stores\";\nimport { clearContx } from \"../utils/translate\";\nimport DownloadImageButton from \"./DownloadImageButton\";\nimport Slider from \"./NodeSize\";\nimport { Password } from \"./Password\";\nimport PostImageButton from \"./PostImageButton\";\nimport { useTranslation, Trans } from \"react-i18next\";\n\n/**\n * A textarea component for encrypting text into an image.\n * @returns A JSX Element for a textarea component.\n */\nconst Encrypt: React.FC = () => {\n    const [openModal, setOpenModal] = useState(false);\n\n    const { t } = useTranslation();\n\n    const {\n        input,\n        setInput,\n        setOutput,\n        password,\n        setPassword,\n        encryptionEnabled,\n        setEncryptionEnabled,\n        setEncryptedText,\n        decryptedText,\n        setDecryptedText,\n        stringToDecrypt,\n        setStringToDecrypt,\n    } = useImageState();\n\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n    const buttonTheme: CustomFlowbiteTheme[\"button\"] = {\n        color: {\n            primary: \"bg-none\",\n        },\n        base: \"flex-none\",\n        inner: {\n            base: \"px-0\",\n        },\n    };\n\n    return (\n        <div className=\"w-full\">\n            <span className=\"flex flex-row justify-between pt-2 text-white\">\n                <div className=\"grid w-full grid-cols-2 xs:grid-cols-2\">\n                    <h4 className=\"h4 sm:visible md:visible lg:visible mb-2 text-left text-2xl font-bold xs:invisible dark:text-white\">\n                        {t(\"encrypt.title\")}\n                    </h4>\n                    <p className=\"col-span-1 flex flex-row-reverse text-right font-medium xs:mr-0 xs:pb-2 xs:text-right\">\n                        {/* <!-- Modal toggle --> */}\n                        <Button\n                            onClick={() => setOpenModal(true)}\n                            theme={buttonTheme}\n                            color={\"primary\"}\n                            type=\"button\"\n                            aria-label={t(\"encrypt.modal.title\")}\n                        >\n                            <FontAwesomeIcon\n                                icon={faCircleInfo}\n                                className=\"tranistion-colors ml-1 text-lg text-seablue duration-300 ease-linear hover:text-white\"\n                            />\n                        </Button>\n                    </p>\n                </div>\n            </span>\n            {/* <!-- Main modal --> */}\n            <Modal dismissible show={openModal} onClose={() => setOpenModal(false)}>\n                <Modal.Header>{t(\"encrypt.modal.title\")}</Modal.Header>\n                <Modal.Body>\n                    <div className=\"space-y-6\">\n                        <div className=\"text-base leading-relaxed\">\n                            <List>\n                                <List.Item className=\"text-gray-700 dark:text-gray-100\">\n                                    {t(\"encrypt.modal.step1\")}\n                                </List.Item>\n                                <List.Item className=\"text-gray-700 dark:text-gray-100\">\n                                    {t(\"encrypt.modal.step2\")}\n                                </List.Item>\n                            </List>\n                        </div>\n                    </div>\n                    <h5 className=\"text-md mt-5 font-bold text-gray-800 dark:text-gray-200\">\n                        {t(\"encrypt.modal.caveatstitle\")}\n                    </h5>\n                    <p className=\"mt-1 text-sm leading-relaxed text-gray-700 dark:text-gray-100\">\n                        {t(\"encrypt.modal.caveatstext\")}\n                    </p>\n                    <h5 className=\"text-md mt-5 font-bold text-gray-800 dark:text-gray-200\">\n                        {t(\"encrypt.modal.securitytitle\")}\n                    </h5>\n                    <p className=\"mt-1 text-sm leading-relaxed text-gray-700 dark:text-gray-100\">\n                        <Trans i18nKey=\"encrypt.modal.securitytext\" components={{ i: <i /> }}>\n                            Images shared to the feed are stored on a server until\n                            they are deleted or expire, however, the plain text\n                            message is never sent to our servers. All encryption is\n                            calculated by your web browser, so only the encrypted\n                            message is stored to the image's metadata, which\n                            <i>is</i> temporarily hosted on our servers. This novel\n                            app is meant for educational and entertainment purposes.\n                            That being said, it uses 128-bit AES encryption, so it's\n                            about as secure as you can get.\n                        </Trans>\n                    </p>\n                </Modal.Body>\n                {/* <Modal.Footer>\n                    <Button onClick={() => setOpenModal(false)}>I accept</Button>\n                    <Button color=\"gray\" onClick={() => setOpenModal(false)}>\n                        Decline\n                    </Button>\n                </Modal.Footer> */}\n            </Modal>\n            <form className=\"h-full min-h-48\">\n                <div className=\"sm:mb-0 sm:rounded-none sm:rounded-t-lg mb-4 min-h-48 w-full rounded-lg border border-gray-200 bg-gray-50 dark:border-gray-600 dark:bg-slate-900 xs:mb-0 xs:rounded-none xs:rounded-t-lg\">\n                    <div className=\"flex items-center justify-between border-b px-3 py-2 dark:border-slate-700\">\n                        <div className=\"sm:divide-x sm:rtl:divide-x-reverse flex flex-wrap items-center divide-gray-200 dark:divide-gray-600\">\n                            <div className=\"sm:ps-4 flex flex-wrap items-center space-x-1 rtl:space-x-reverse\">\n                                <DownloadImageButton />\n                            </div>\n                        </div>\n                        <Slider />\n                        <div className=\"sm:w-56 flex\">\n                            <Password\n                                password={password}\n                                setPassword={setPassword}\n                                setEncryptedText={setEncryptedText}\n                                encryptionEnabled={encryptionEnabled}\n                                setEncryptionEnabled={setEncryptionEnabled}\n                                setOutput={setOutput}\n                                decryptedText={decryptedText}\n                                setDecryptedText={setDecryptedText}\n                                stringToDecrypt={stringToDecrypt}\n                                setStringToDecrypt={setStringToDecrypt}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"light:bg-white px-4 py-2 dark:bg-slate-700\">\n                        <textarea\n                            rows={4}\n                            id=\"text-input\"\n                            value={input}\n                            onChange={(e) => {\n                                setInput(e.target.value);\n                                if (e.target.value.trim() === \"\") {\n                                    setEncryptedText(\"\");\n                                    clearContx(canvasRef);\n                                    setOutput([]);\n                                }\n                            }}\n                            data-testid=\"text-input\"\n                            maxLength={254}\n                            tabIndex={0}\n                            className=\"block h-full min-h-28 w-full border-0 bg-white px-0 text-base text-gray-800 focus:ring-0 dark:!bg-slate-700 dark:text-white dark:placeholder-gray-400\"\n                            placeholder={`${decryptedText ? decryptedText : t(\"encrypt.placeholder\")}`}\n                            required\n                        ></textarea>\n                    </div>\n                    <div className=\"flex items-center justify-end border-b px-3 py-2 dark:border-gray-600\">\n                        <div className=\"sm:divide-x sm:rtl:divide-x-reverse flex flex-wrap items-center divide-gray-200 dark:divide-gray-600\">\n                            <div className=\"sm:ps-4 flex flex-wrap items-center space-x-1 rtl:space-x-reverse\">\n                                <PostImageButton />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default Encrypt;"],"names":["useIsomorphicLayoutEffect","canUseDOM","React.useLayoutEffect","React.useEffect","useMutation","mutation","options","client","useApolloClient","verifyDocumentType","DocumentType","_a","React.useState","result","setResult","ref","React.useRef","execute","React.useCallback","executeOptions","baseOptions","__assign","mutationId","clientOptions","mergeOptions","response","_b","data","errors","error","ApolloError","onError","result_1","equal","onCompleted","result_2","reset","result_3","current","exports","prefix","iconName","width","height","aliases","unicode","svgPathData","displayDimensions","trimImageFromCanvas","canvas","watermark","ctx","top","left","right","bottom","y","x","trimmedWidth","trimmedHeight","trimmedCanvas","trimmedCtx","scaleCanvas","key","action","img","url","getCanvasBlob","resolve","reject","displayWidth","displayHeight","originalWidth","originalHeight","scaledWidth","scaledHeight","posX","posY","saveToDisk","blob","fileName","fileAndFunction","blobUrl","saveAs","addMetadataToPng","message","encryptionEnabled","buffer","pngData","withVersion","addMetadata","withMessage","withBoolean","getFilename","encryptedText","filename","createPngWithMetadata","input","toastId","handleBlobError","errMsg","toast","handleBlobInfo","infoMsg","progress","handleMetadataAndResolve","payloadImage","scaledCanvas","outputWidth","outputHeight","DownloadImageButton","t","useTranslation","canvasRef","setInput","setOutput","setEncryptionEnabled","password","setPassword","setEncryptedText","setDecryptedText","useImageState","handleSaveVisibility","handleDownload","clearContx","jsx","Fragment","jsxs","Tooltip","Dropdown","customDropdownTheme","FontAwesomeIcon","faFloppyDisk","Slider","size","setSize","state","handleSliderChange","event","e","useCreateBinaryFeedImage","createFileMutation","CREATE_BINARYFEEDIMAGE","fileInput","useCreateBinaryImagePost","CREATE_BINARYIMAGEPOST","publishMutation","PUBLISH_BINARYIMAGEPOST","author","imageUrl","timestamp","datePosted","id","useGetPreSignedPostPayload","refetch","useQuery","GET_PRE_SIGNED_POST_PAYLOAD","file","uploadFileToS3","presignedPostData","formData","xhr","PostImageButton","setAuthor","useState","getPreSignedPostPayload","createBinaryFeedImage","createBinaryImagePost","publishBinaryImagePost","handlePostVisibility","handlePost","preSignedPostPayload","createdFile","authorOrAnon","postId","faPaperPlane","Encrypt","openModal","setOpenModal","decryptedText","stringToDecrypt","setStringToDecrypt","useRef","buttonTheme","Button","faCircleInfo","Modal","List","Trans","Password"],"mappings":"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","x_google_ignoreList":[0,1,2]}